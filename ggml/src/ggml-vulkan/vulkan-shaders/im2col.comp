#version 450

#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_spirv_intrinsics: enable
#extension GL_EXT_control_flow_attributes : require

#if RTE16
spirv_execution_mode(capabilities = [4467], 4462, 16); // RoundingModeRTE, 16 bits
#endif

layout (push_constant) uniform parameter
{
    uint batch_offset; uint offset_delta;
    uint IC;
    uint IW; uint IH;
    uint OW; uint OH;
    uint KW; uint KH;
    uint pelements;
    uint CHW;
    int s0; int s1;
    int p0; int p1;
    int d0; int d1;
} p;

#include "types.comp"

layout(constant_id = 0) const uint BLOCK_SIZE = 32;

const uint NUM_ITER = 512 / BLOCK_SIZE;

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

layout (binding = 0) readonly buffer X {A_TYPE data_a[];};
layout (binding = 1) writeonly buffer D {D_TYPE data_d[];};

void main() {
    const uint gidx = gl_GlobalInvocationID.x;

    const uint oh = gl_GlobalInvocationID.y;
    const uint batch_ic = gl_GlobalInvocationID.z;

    const uint batch = batch_ic / p.IC;
    const uint ic = batch_ic % p.IC;

    const uint ksize = p.OW * ((p.KH > 1) ? p.KW : 1);
    const uint src_base = ic * p.offset_delta + batch * p.batch_offset;
    const uint dst_base = ((batch * p.OH + oh) * p.OW) * p.CHW + ic * p.KW * p.KH;

    [[unroll]] for (uint idx = 0; idx < NUM_ITER; ++idx) {

        const uint i = gidx * NUM_ITER + idx;
        if (i >= p.pelements) continue;

        const uint kx = i / ksize;
        const uint ky = (i % ksize) / p.OW;
        const uint ix = i % p.OW;

        const int iiw = int(ix * uint(p.s0)) + int(kx * uint(p.d0)) - p.p0;
        const int iih = int(oh * uint(p.s1)) + int(ky * uint(p.d1)) - p.p1;

        const uint dst_offset = dst_base + ix * p.CHW + ky * p.KW + kx;

        const bool valid = iih >= 0 && iih < int(p.IH) && iiw >= 0 && iiw < int(p.IW);
        const uint src_offset = src_base + uint(iih) * p.IW + uint(iiw);

        data_d[dst_offset] = D_TYPE(valid ? data_a[src_offset] : 0.0);
    }

}
