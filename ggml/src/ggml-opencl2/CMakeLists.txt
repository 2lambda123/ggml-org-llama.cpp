
find_package(OpenCL)

if (OpenCL_FOUND)
    find_package(Python3 REQUIRED)

    set(TARGET_NAME ggml-opencl2)

    add_library(${TARGET_NAME}
                ggml-opencl2.cpp
                ../../include/ggml-opencl2.h)
    target_link_libraries(${TARGET_NAME} PRIVATE ggml-base ${OpenCL_LIBRARIES})
    target_include_directories(${TARGET_NAME} PRIVATE . .. ${OpenCL_INCLUDE_DIRS})

    # TODO - this is kind of strange. We have been calling this backend OpenCL2,
    # so everything (function names, folder name, etc) except macro switches
    # has been OpenCL2. Now, the backend frameworke enforces the use of the folder
    # name as the backend name and switch. So, GGML_USE_OPENCL2 is used in
    # ggml-backend-reg.cpp, but the rest still uses GGML_USE_OPENCL.
    add_compile_definitions(GGML_USE_OPENCL)

    if (GGML_OPENCL_PROFILING)
        message(STATUS "OpenCL profiling enabled (increases CPU overhead)")
        add_compile_definitions(GGML_OPENCL_PROFILING)
    endif ()

    add_compile_definitions(GGML_OPENCL_SOA_Q)

    if (GGML_OPENCL_SMALL_ALLOC)
        message(STATUS "OpenCL will allocate a separate buffer for each tensor. "
            "The default behavior allocates a large buffer to hold multiple tensors.")
        add_compile_definitions(GGML_OPENCL_SMALL_ALLOC)
    endif ()

    if (GGML_OPENCL_USE_ADRENO_KERNELS)
        message(STATUS "OpenCL will use matmul kernels optimized for Adreno")
        add_compile_definitions(GGML_OPENCL_USE_ADRENO_KERNELS)
    endif ()

    if (GGML_OPENCL_EMBED_KERNELS)
        add_compile_definitions(GGML_OPENCL_EMBED_KERNELS)

        set(OPENCL2_CL_SOURCE_EMBED         "${CMAKE_BINARY_DIR}/autogenerated/ggml-opencl2.cl.h")
        set(OPENCL2_MM_CL_SOURCE_EMBED      "${CMAKE_BINARY_DIR}/autogenerated/ggml-opencl2_mm.cl.h")
        set(OPENCL2_CVT_CL_SOURCE_EMBED     "${CMAKE_BINARY_DIR}/autogenerated/ggml-opencl2_cvt.cl.h")

        set(OPENCL2_GEMV_NOSHUFFLE_SOURCE_EMBED             "${CMAKE_BINARY_DIR}/autogenerated/ggml-opencl2_gemv_noshuffle.cl.h")
        set(OPENCL2_GEMV_NOSHUFFLE_GENERAL_SOURCE_EMBED     "${CMAKE_BINARY_DIR}/autogenerated/ggml-opencl2_gemv_noshuffle_general.cl.h")
        set(OPENCL2_MUL_MAT_Ab_Bi_8x4_SOURCE_EMBED          "${CMAKE_BINARY_DIR}/autogenerated/ggml-opencl2_mul_mat_Ab_Bi_8x4.cl.h")
        set(OPENCL2_TRANSPOSE_16_SOURCE_EMBED               "${CMAKE_BINARY_DIR}/autogenerated/ggml-opencl2_transpose_16.cl.h")
        set(OPENCL2_TRANSPOSE_32_SOURCE_EMBED               "${CMAKE_BINARY_DIR}/autogenerated/ggml-opencl2_transpose_32.cl.h")
        set(OPENCL2_TRANSPOSE_32_16_SOURCE_EMBED            "${CMAKE_BINARY_DIR}/autogenerated/ggml-opencl2_transpose_32_16.cl.h")

        set(EMBED_KERNEL_SCRIPT             "${CMAKE_CURRENT_SOURCE_DIR}/kernels/embed_kernel.py")
        file(MAKE_DIRECTORY                 "${CMAKE_BINARY_DIR}/autogenerated")

        include_directories("${CMAKE_BINARY_DIR}/autogenerated")

        # Python must be accessible from command line
        add_custom_command(
            OUTPUT ${OPENCL2_CL_SOURCE_EMBED}
            COMMAND ${Python3_EXECUTABLE} ${EMBED_KERNEL_SCRIPT}
                ${CMAKE_CURRENT_SOURCE_DIR}/kernels/ggml-opencl2.cl
                ${OPENCL2_CL_SOURCE_EMBED}
            DEPENDS kernels/ggml-opencl2.cl ${EMBED_KERNEL_SCRIPT}
            COMMENT "Generate ggml-opencl2.cl.h"
        )

        add_custom_command(
            OUTPUT ${OPENCL2_MM_CL_SOURCE_EMBED}
            COMMAND ${Python3_EXECUTABLE} ${EMBED_KERNEL_SCRIPT}
                ${CMAKE_CURRENT_SOURCE_DIR}/kernels/ggml-opencl2_mm.cl
                ${OPENCL2_MM_CL_SOURCE_EMBED}
            DEPENDS kernels/ggml-opencl2_mm.cl ${EMBED_KERNEL_SCRIPT}
            COMMENT "Generate ggml-opencl2_mm.cl.h"
        )

        add_custom_command(
            OUTPUT ${OPENCL2_CVT_CL_SOURCE_EMBED}
            COMMAND ${Python3_EXECUTABLE} ${EMBED_KERNEL_SCRIPT}
                ${CMAKE_CURRENT_SOURCE_DIR}/kernels/ggml-opencl2_cvt.cl
                ${OPENCL2_CVT_CL_SOURCE_EMBED}
            DEPENDS kernels/ggml-opencl2_cvt.cl ${EMBED_KERNEL_SCRIPT}
            COMMENT "Generate ggml-opencl2_cvt.cl.h"
        )

        add_custom_command(
            OUTPUT ${OPENCL2_GEMV_NOSHUFFLE_SOURCE_EMBED}
            COMMAND python ${EMBED_KERNEL_SCRIPT}
                ${CMAKE_CURRENT_SOURCE_DIR}/kernels/ggml-opencl2_gemv_noshuffle.cl
                ${OPENCL2_GEMV_NOSHUFFLE_SOURCE_EMBED}
            DEPENDS kernels/ggml-opencl2_gemv_noshuffle.cl ${EMBED_KERNEL_SCRIPT}
            COMMENT "Generate ggml-opencl2_gemv_noshuffle.cl.h"
        )

        add_custom_command(
            OUTPUT ${OPENCL2_GEMV_NOSHUFFLE_GENERAL_SOURCE_EMBED}
            COMMAND python ${EMBED_KERNEL_SCRIPT}
                ${CMAKE_CURRENT_SOURCE_DIR}/kernels/ggml-opencl2_gemv_noshuffle_general.cl
                ${OPENCL2_GEMV_NOSHUFFLE_GENERAL_SOURCE_EMBED}
            DEPENDS kernels/ggml-opencl2_gemv_noshuffle_general.cl ${EMBED_KERNEL_SCRIPT}
            COMMENT "Generate ggml-opencl2_gemv_noshuffle_general.cl.h"
        )

        add_custom_command(
            OUTPUT ${OPENCL2_MUL_MAT_Ab_Bi_8x4_SOURCE_EMBED}
            COMMAND python ${EMBED_KERNEL_SCRIPT}
                ${CMAKE_CURRENT_SOURCE_DIR}/kernels/ggml-opencl2_mul_mat_Ab_Bi_8x4.cl
                ${OPENCL2_MUL_MAT_Ab_Bi_8x4_SOURCE_EMBED}
            DEPENDS kernels/ggml-opencl2_mul_mat_Ab_Bi_8x4.cl ${EMBED_KERNEL_SCRIPT}
            COMMENT "Generate ggml-opencl2_mul_mat_Ab_Bi_8x4.cl.cl.h"
        )

        add_custom_command(
            OUTPUT ${OPENCL2_TRANSPOSE_16_SOURCE_EMBED}
            COMMAND python ${EMBED_KERNEL_SCRIPT}
                ${CMAKE_CURRENT_SOURCE_DIR}/kernels/ggml-opencl2_transpose_16.cl
                ${OPENCL2_TRANSPOSE_16_SOURCE_EMBED}
            DEPENDS kernels/ggml-opencl2_transpose_16.cl ${EMBED_KERNEL_SCRIPT}
            COMMENT "Generate ggml-opencl2_transpose_16.cl.h"
        )

        add_custom_command(
            OUTPUT ${OPENCL2_TRANSPOSE_32_SOURCE_EMBED}
            COMMAND python ${EMBED_KERNEL_SCRIPT}
                ${CMAKE_CURRENT_SOURCE_DIR}/kernels/ggml-opencl2_transpose_32.cl
                ${OPENCL2_TRANSPOSE_32_SOURCE_EMBED}
            DEPENDS kernels/ggml-opencl2_transpose_32.cl ${EMBED_KERNEL_SCRIPT}
            COMMENT "Generate ggml-opencl2_transpose_32.cl.h"
        )

        add_custom_command(
            OUTPUT ${OPENCL2_TRANSPOSE_32_16_SOURCE_EMBED}
            COMMAND python ${EMBED_KERNEL_SCRIPT}
                ${CMAKE_CURRENT_SOURCE_DIR}/kernels/ggml-opencl2_transpose_32_16.cl
                ${OPENCL2_TRANSPOSE_32_16_SOURCE_EMBED}
            DEPENDS kernels/ggml-opencl2_transpose_32_16.cl ${EMBED_KERNEL_SCRIPT}
            COMMENT "Generate ggml-opencl2_transpose_32_16.cl.h"
        )

        target_sources(${TARGET_NAME} PRIVATE
                       ${OPENCL2_CL_SOURCE_EMBED}
                       ${OPENCL2_MM_CL_SOURCE_EMBED}
                       ${OPENCL2_CVT_CL_SOURCE_EMBED}
                       ${OPENCL2_GEMV_NOSHUFFLE_SOURCE_EMBED}
                       ${OPENCL2_GEMV_NOSHUFFLE_GENERAL_SOURCE_EMBED}
                       ${OPENCL2_MUL_MAT_Ab_Bi_8x4_SOURCE_EMBED}
                       ${OPENCL2_TRANSPOSE_16_SOURCE_EMBED}
                       ${OPENCL2_TRANSPOSE_32_SOURCE_EMBED}
                       ${OPENCL2_TRANSPOSE_32_16_SOURCE_EMBED})
    else ()
        # copy ggml-opencl.cl to bin directory
        configure_file(kernels/ggml-opencl2.cl ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/ggml-opencl2.cl COPYONLY)
        configure_file(kernels/ggml-opencl2_mm.cl ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/ggml-opencl2_mm.cl COPYONLY)
        configure_file(kernels/ggml-opencl2_cvt.cl ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/ggml-opencl2_cvt.cl COPYONLY)
    endif ()
else ()
    message(WARNING "OpenCL not found")
endif ()
