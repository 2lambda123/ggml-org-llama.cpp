name: Build on Linux using cross-compiler
on:
  workflow_dispatch:
  workflow_call:

jobs:
  ubuntu-22-riscv64-vulkan-cross:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Riscv
        run: |
          sudo dpkg --add-architecture riscv64
          sudo sed -i 's|http://azure.archive.ubuntu.com/ubuntu|http://ports.ubuntu.com/ubuntu-ports|g' \
                 /etc/apt/sources.list /etc/apt/apt-mirrors.txt
          sudo apt-get clean
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
                  build-essential \
                  crossbuild-essential-riscv64 \
                  libvulkan-dev:riscv64

      - name: Setup Vulkan SDK
        run: |
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list \
                        https://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
          sudo apt-get update -y
          sudo apt-get install -y vulkan-sdk

      - name: Build
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release \
                         -DGGML_VULKAN=ON \
                         -DGGML_OPENMP=OFF \
                         -DLLAMA_BUILD_EXAMPLES=ON \
                         -DLLAMA_BUILD_TESTS=OFF \
                         -DCMAKE_SYSTEM_NAME=Linux \
                         -DCMAKE_SYSTEM_PROCESSOR=riscv64 \
                         -DCMAKE_C_COMPILER=riscv64-linux-gnu-gcc \
                         -DCMAKE_CXX_COMPILER=riscv64-linux-gnu-g++ \
                         -DCMAKE_C_FLAGS_INIT='-fPIC' \
                         -DCMAKE_CXX_FLAGS_INIT='-fPIC' \
                         -DCMAKE_FIND_ROOT_PATH=/usr/lib/riscv64-linux-gnu \
                         -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
                         -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
                         -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=BOTH

          cmake --build build --config Release -j $(nproc)
